# app/config/services.yml

# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]

# Best Practice: Don't define parameters for the classes of your services and keep your service names short
#service slugger permettant de remplacer dans les slug, les espaces par des -.
    app.slugger:
        class: AppBundle\Utils\Slugger

# These are the Twig extensions that create new filters and functions for
# using them in the templates
    app.twig.app_extension: # je connais pas, à chercher !
        public:    false
        class:     AppBundle\Twig\AppExtension
        arguments: [@markdown, %app_locales%]
        tags:
            - { name: twig.extension }

    # Formate une date dans la langue (locale sf2) Syntaxe :
    # Syntaxe : {{ maDate | localizeddate(‘tailleDate‘, ‘tailleHeure‘, ‘locale‘ }}
    # « maDate » doit être un objet DateTime, pas une chaîne.
    # tailleDate : none/short/medium/long/full
    # tailleHeure : none/short/medium/long/full
    # locale : facultatif, par défaut utilisera la langue de la session mais il est possible de forcer une locale.
    #app.twig.intl_extension:
    #    public: false
    #    class:  Twig_Extensions_Extension_Intl
    #    tags:
    #        - { name: twig.extension }
    app.twig.text_extension: # permet de tronquer une chain de caractère {{ maChaine | truncate(10, true, '[...]') }}
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }
    app.twig.debug_extension: # je connais pas, à chercher !
        class: Twig_Extensions_Extension_Debug
        tags: 
            - { name: 'twig.extension' }
    app.redirect_to_preferred_locale_listener: # je connais pas, à chercher !
        class: AppBundle\EventListener\RedirectToPreferredLocaleListener
        arguments: [@router, %app_locales%, %locale%]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    # Uncomment the following lines to define a service for the Post Doctrine repository.
    # It's not mandatory to create these services, but if you use repositories a lot,
    # these services simplify your code:
    #
    # app.post_repository:
    #     class:     Doctrine\ORM\EntityRepository
    #     factory:   [@doctrine.orm.entity_manager, getRepository]
    #     arguments: [AppBundle\Entity\Post]
    #
    # // traditional code inside a controller
    # $entityManager = $this->getDoctrine()->getManager();
    # $posts = $entityManager->getRepository('AppBundle:Post')->findAll();
    #
    # // same code using repository services
    # $posts = $this->get('app.post_repository')->findAll();